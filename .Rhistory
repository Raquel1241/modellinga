# Capacity sequence
predict = data.frame(Capacity = seq(0.88, 1.1, by = 1/(1696)))
# Capacity sequence
predict = data.frame(Capacity = seq(0.88, 1.1, by = (1.1-0.88)/(1696)))
View(predict)
View(predict)
# Capacity sequence
predict = data.frame(Capacity = seq(0.88, 1.1, by = (1.1-0.88)/(nrow(testdata)-1)))
# Fit linear models
#1st ord.
lm1 = lm(RUL~Capacity, data = traindat)  #Create a linear regression with two variables
predict$lm1 = predict(lm1, new = predict[1])
predict$lm1[predict$lm1 < 0] = 0
predict$lm1 = predict(lm1, new = predict[1])
predict$lm1[predict$lm1 < 0] = NA
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
predict$lm1 = predict(lm1, new = predict[1])
predict$lm1[predict$lm1 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
predict$lm1 = predict(lm1, new = predict[1])
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
#1st ord. sqrt
lm1sqrt = lm(sqrtRUL~Capacity, data = traindat)
predict$lm1 = predict(lm1, new = predict[1])
predict$lm1[predict$lm1 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
View(predict)
View(predict)
mean((testdata$NO.1 - predict$lm1)^2)
testdata$NO.1 - predict$lm1
mean((testdata$NO.1 - predict$lm1)^2))
mean((testdata$NO.1 - predict$lm1)^2)
View(RULdata)
View(RULdata)
mean((RULdata$NO.1 - predict$lm1)^2)
MSE = c()
append(MSE, 1, after = length(x))
append(MSE, 1, after = length(MSE))
MSE
append(MSE, 1))
append(MSE, 1)
MSE
append(MSE, c(1)
append(MSE, c(1))
append(MSE, c(1))
MSE
MSE = append(MSE, 1)
MSE
View(predict)
View(predict)
View(RULdata_long)
View(RULdata_long)
mean((RULdata$NO.1 - predict$lm1)^2)
MSE = data.frame(NULL)
View(MSE)
View(MSE)
nrow(RULdata)
MSE = data.frame(A= NULL), B= NULL)
MSE = data.frame(A= NULL, B= NULL)
View(MSE)
View(MSE)
MSE = data.frame(A= numeric(0), B= NULL)
View(MSE)
View(MSE)
MSE = data.frame(lm1= numeric(0))
View(MSE)
View(MSE)
RULdata[0,1]
RULdata[,1]
View(RULdata)
View(RULdata)
RULdata[,1]
RULdata[1,]
RULdata[2,]
RULdata[,2]
predict
View(predict)
View(predict)
View(testdata_long)
View(testdata_long)
testdata_long$RUL
testdata_long$Capacity
RULdata_long
testdata_long$Capacity
lm1
predict
rev(predict$lm1)
mean((RULdata[,2] - rev(predict$lm1))^2)
rev(predict$lm)
tail(rev(predict$lm))
(RULdata[,2] - rev(predict$lm1)^2
(RULdata[,2] - rev(predict$lm1))^2
RULdata[,2] - rev(predict$lm1)
RULdata[,2] - rev(predict$lm1)
mean((RULdata[,2] - rev(predict$lm1))^2)
(RULdata[,2] - rev(predict$lm1))^2
View(MSE)
View(MSE)
paste0("NO.", c(1,2))
View(testdata)
View(testdata)
paste0("NO.", seq(1,ncol(testdata)-2))
paste0("NO.", seq(1,ncol(testdata)-1))
MSE = data.frame(paste0("NO.", seq(1,ncol(testdata)-1)))
View(MSE)
View(MSE)
MSE = data.frame(c = paste0("NO.", seq(1,ncol(testdata)-1)))
View(MSE)
View(MSE)
MSE = data.frame(NULL)
colnames(MSE) <- paste0("NO.", seq(1,ncol(testdata)-1))
MSE = data.frame(matrix(ncol = ncol(testdata)-1, nrow = 0))
colnames(MSE) <- paste0("NO.", seq(1,ncol(testdata)-1))
View(MSE)
View(MSE)
View(MSE)
View(MSE)
MSE[,1]
MSE[,1] = 1
MSE[,1] = c(1,2,3,4,5,6,7,8,9,10)
MSE[1,1] = c(1,2,3,4,5,6,7,8,9,10)
MSE[]
MSE[1,]
MSE[1,1]
MSE[1,1] = 5
View(MSE)
View(MSE)
for (i in 2:(nrow(RULdata)-1)){ # loop over batteries
c = mean((RULdata[,i] - rev(predict$lm1))^2)
MSE[1,i-1] <- c # Append new column
}
for (i in 1:(nrow(RULdata)-2)){ # loop over batteries
c = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- c # Append new column
}
RULdata[,2]
mean((RULdata[,i+1] - rev(predict$lm1))^2)
mean((RULdata[,1+1] - rev(predict$lm1))^2)
nrow(RULdata)-2
mean((RULdata[,1695] - rev(predict$lm1))^2)
ncol(RULdata)-2
mean((RULdata[,10] - rev(predict$lm1))^2)
for (i in 1:(ncol(RULdata)-2)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- val # Append new value
}
View(MSE)
View(MSE)
colnames(testdata)
colnames(testdata)[2:]
colnames(testdata)[2,]
colnames(testdata)[2]
colnames(testdata)[2,10]
colnames(testdata)[2:10]
colnames(testdata)[-1]
MSE = data.frame(Battery = colnames(testdata)[-1])
View(MSE)
View(MSE)
# Calculate MSE for each method and for each battery
MSE = data.frame(matrix(ncol = ncol(testdata)-1, nrow = 0)) # initialise MSE
colnames(MSE) <- paste0("NO.", seq(1,ncol(testdata)-1)) # change column names
for (i in 1:(ncol(RULdata)-2)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- val # Append new value
}
View(MSE)
View(MSE)
# Calculate MSE for each method and for each battery
MSE = data.frame(matrix(ncol = ncol(testdata)-1, nrow = 0)) # initialise MSE
colnames(MSE) <- paste0("NO.", seq(1,ncol(testdata)-1)) # change column names
for (i in 1:(ncol(RULdata)-2)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- val # Append new value
}
View(MSE)
View(MSE)
for (i in 1:(ncol(RULdata)-1)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- val # Append new value
}
for (i in 1:(ncol(RULdata)-1)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2)
MSE[1,i] <- val # Append new value
}
seq(1,10)
seq(1,ncol(MSE))
MSE
MSE[1,]
MSE[1,1]
MSE[1,]
ggplot(aes(x,MSE)) + geom_point()
plot((x,MSE))
plot(x,MSE)
x <- seq(1,ncol(MSE))
plot(x,MSE)
plot(x,MSE)[-10]
install.packages('ggfortify')
traindat = read.csv("./Data/Traindatlong.csv")
#traindat = read.csv("/Users/tyrenkoning/Desktop/University/Modelling-2A/Traindatlong.csv")
traindat$sqrtRUL = sqrt(traindat$RUL)
traindat$one_thirdRUL = (traindat$RUL)^(1/3)
predict = data.frame(Capacity = seq(0.88, 1.1, 0.001))
#Linear Regression 1st order
{
lm1 = lm(RUL~Capacity, data = traindat)  #Create a linear regression with two variables
summary(lm1) #Review the results
acf(lm1$residuals, type = "correlation") #Test for autocorrelation, shows why lin. reg. not allowed
predict$lm1 = predict(lm1, new = predict)
predict$lm1[predict$lm1 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red')
}
View(lm1)
View(lm1)
View(lm1)
View(lm1)
#Linear Regression 2nd order
{lm2 = lm(RUL~Capacity + I(Capacity^2), data = traindat)
summary(lm2)
acf(lm1$residuals, type = "correlation")
predict$lm2 = predict(lm2, new = predict)
predict$lm2[predict$lm2 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm2), color = 'Red')}
#Linear Regression 3rd order
{lm3 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
summary(lm3)
acf(lm1$residuals, type = "correlation")
predict$lm3 = predict(lm3, new = predict)
predict$lm3[predict$lm3 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm3), color = 'Red')}
#Linear Regression 4th order
{lm4 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4), data = traindat)
summary(lm4)
acf(lm1$residuals, type = "correlation")
predict$lm4 = predict(lm4, new = predict)
predict$lm4[predict$lm4 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm4), color = 'Red')}
#Linear Regression 5th order
{lm5 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
summary(lm5)
acf(lm1$residuals, type = "correlation")
library(ggfortify)
autoplot(lm5)
predict$lm5 = predict(lm5, new = predict)
predict$lm5[predict$lm5 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm5), color = 'Red')}
#Linear Regression 5th order sqrt data
{lm5 = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
summary(lm5)
acf(lm1$residuals, type = "correlation")
predict$lm5 = predict(lm5, new = predict)
predict$lm5[predict$lm5 < 0] = 0
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = RUL, group = Battnum), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm5), color = 'Red')}
#Linear Regression 5th order 1/3 data
{lm5onethird = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
summary(lm5onethird)
acf(lm1$residuals, type = "correlation")
autoplot(lm5onethird)
predict$lm5 = predict(lm5, new = predict)
predict$lm5[predict$lm5 < 0] = 0
#ci90 <- predict(lm5, new = predict, interval = "confidence", level = 0.90)
ci95 <- as.data.frame(predict(lm5, new = predict, interval = "confidence", level = 0.95))
traindat$CI95low = ci95$lwr
traindat$CI95up = ci95$upr
#ci99 <- predict(lm5, new = predict, interval = "confidence", level = 0.99)
ci_pred <- as.data.frame(ci90) %>%
mutate(ID = "90%") %>%
bind_rows(as.data.frame(ci95) %>%
mutate(ID = "95%"),
as.data.frame(ci99) %>%
mutate(ID = "99%")
)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(data = traindat, aes(x = Capacity, y = one_thirdRUL, group = Battnum), size=0.5) +
geom_line(data = predict, aes(x = Capacity, y = ci95.lwr), color = 'Blue', lty = 2) +
geom_line(data = predict, aes(x = Capacity, y = ci95.upr), color = 'Blue', lty = 2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm5), color = 'Red')}
View(lm5onethird)
library(reshape2)
library(ggplot2)
traindat = read.csv("./Data/Traindatlong.csv")
traindat$sqrtRUL = sqrt(traindat$RUL)
traindat$one_thirdRUL = (traindat$RUL)^(1/3)
testdata = read.csv("./Data/Battery_test.csv")
RULdata <- data.frame(testdata$Cycle) # initalize data
for (i in 1:(ncol(testdata)-1)){ # loop over each battery
c = c(seq(sum(!is.na(testdata[i+1])), sum(!is.na(testdata[i+1]))-(nrow(testdata)-1), -1))
c[c<0] = 0 # remove negative values
RULdata[ , ncol(RULdata) + 1] <- c # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
RULdata_long <- melt(RULdata, id = "testdata.Cycle") # long format
testdata_long <- melt(testdata, id = "Cycle")
testdata_long$RUL <- RULdata_long$value # add RULdata to testdata
colnames(testdata_long)[2] <- "Battery" # change column names
colnames(testdata_long)[3] <- "Capacity"
colnames(testdata_long)[3] <- "Capacity"
# Plot RUL of test data
ggplot(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery)) +
ggtitle("Capacity vs. RUL of test data ") +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
# Capacity sequence
predict = data.frame(Capacity = seq(0.88, 1.1, by = (1.1-0.88)/(nrow(testdata)-1)))
# Fit linear models
#1st ord.
lm1 = lm(RUL~Capacity, data = traindat)  #Create a linear regression with two variables
predict$lm1 = predict(lm1, new = predict[1])
predict$lm1[predict$lm1 < 0] = 0
# Calculate MSE for each method and for each battery
MSE = data.frame(matrix(ncol = ncol(testdata)-1, nrow = 0)) # initialize MSE
colnames(MSE) <- paste0("NO.", seq(1,ncol(testdata)-1)) # change column names
for (i in 1:(ncol(RULdata)-1)){ # loop over batteries
val = mean((RULdata[,i+1] - rev(predict$lm1))^2) # calculate MSE
MSE[1,i] <- val # Append new value
}
plot(wt, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
x <- seq(1,ncol(MSE))
ggplot(aes(x,MSE)) + geom_point()
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
#1st ord. sqrt
lm1sqrt = lm(sqrtRUL~Capacity, data = traindat)
View(MSE)
View(MSE)
MSE
mean(MSE)
mean(MSE[])
mean(MSE[,])
MSE[,1]
MSE[1,]
mean(MSE[1,])
mean(MSE[1:10])
MSE[1:10]
rowMeans(MSE)
MSE$total = rowMeans(MSE)
View(MSE)
View(MSE)
plot(seq(1,10), MSE, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(seq(1,11), MSE, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
x <- seq(1,ncol(MSE))
plot(seq(x, MSE[-1], main="Scatterplot Example",
plot(x, MSE[-1], main="Scatterplot Example",
xlab="Battery No. ", ylab="MSE ", pch=19)
MSE[-1]
MSE[-1]
MSE[-10]
MSE[-9]
MSE[-11]
ncol(MSE)
MSE[-ncol(MSE)]
# Make scatterplot of MSE
x <- seq(1,ncol(MSE)-1)
plot(x, MSE[-ncol(MSE)], main="Scatterplot of MSE using a first-order linear approximation",
xlab="Battery No. ", ylab="MSE ", pch=19)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1), color = 'Red') +
annotate("text", x=0.91, y=500, label= "Predicted RUL", colour = "red", size = 3.1)
