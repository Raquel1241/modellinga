RUL = lifetime - traindata$Cycle # lifetime - t
RUL[RUL <0] <- 0 # set values after breakdown to zero
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
View(RULdata)
View(RULdata)
traindata = read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity = seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(Cycle = traindata$Cycle)
for(i in 1:ncol(traindata)) {       # for-loop over columns
lifetime = which(traindata[,i+1] <0.88) # find maximum amount of cycles before breakdown
RUL = lifetime - traindata$Cycle # lifetime - t
RUL[RUL <0] <- 0 # set values after breakdown to zero
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
View(RULdata)
View(RULdata)
View(traindata)
View(traindata)
data.long <- melt(RULdata, id = "Cycle")
ggplot(data.long, aes(Cycle, value, group = variable)) +
xlab("t (cycles)") +
ylab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ggtitle("Battery capacity degradation data (training)") +
geom_line() +
geom_hline(yintercept=0.88,
linetype="dashed",
color = "red",
linewidth=0.5) +
annotate("text", x=1900, y=0.87, label= "Threshold: 0.88", colour = "red", size = 3)
n<-0
for(i in capacity) { # for-loop over batteries
n <- n+1
}
data.long <- melt(RULdata, id = "Cycle")
n
capacitydata <- data.frame(capacity)
View(capacitydata)
View(capacitydata)
match(0, traindata[,2])
match(0.01, traindata[,2])
which(traindata[,2] < 1.078770)
max(which(traindata[,2] < 1.078770))
View(capacitydata)
View(capacitydata)
which(traindata[,2] < 0.5)
which(traindata[,2] < 0.5)
traindata[,2]
which(traindata[,2] > 1.0761)
max(which(traindata[,2] > 1.0761))
min(which(traindata[,2] < 1.0761))
min(which(traindata[,2] < 0))
min(which(traindata[,2] < 2))
which.min(abs(traindata[,2] - 0))
library(ggplot2)
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
RULdata <- data.frame(Cycle = traindata$Cycle)
# Create array of cycles and RUL
for(i in 1:ncol(traindata)) {       # for-loop over batteries
lifetime <- which(traindata[,i+1] < 0.88) # find maximum amount of cycles before breakdown
RUL <- lifetime - traindata$Cycle # RUL = total lifetime - t
RUL[RUL <= 0] <- NA # remove values after breakdown
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i) # change column name
}
traindata <- read.csv("./Data/Battery_train.csv")
RULdata <- data.frame(Cycle = traindata$Cycle)
# Create array of cycles and RUL
for(i in 1:ncol(traindata)) {       # for-loop over batteries
lifetime <- which(traindata[,i+1] < 0.88) # find maximum amount of cycles before breakdown
RUL <- lifetime - traindata$Cycle # RUL = total lifetime - t
RUL[RUL <= 0] <- NA # remove values after breakdown
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i) # change column name
}
View(RULdata)
View(RULdata)
vec = 0
vec2 <- append(vec,'r')
print(vec2)
vec = 0
vec <- append(vec,'r')
print(vec)
vec <- append(vec,'r')
print(vec)
vec = 0
vec.append(r)
append(vec,1)
vec= c()
vec2= c()
append(vec2,1)
traindata$Cycle[5]
library(ggplot2)
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 1:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i) # change column name
}
for(b in 1:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
}
RULdata <- data.frame(capacity)
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
RUL = c() # initialize value
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,0+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,0+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,0+1] < 0.88) # find maximum amount of cycles before breakdown
print(paste("Lifetime",lifetime))
time <- which.min(abs(traindata[,0+1] - c)) # find time index closest to capacity
print(paste("Time", time))
RULval <- lifetime - time # RUL = total lifetime - t
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
lifetime <- which(traindata[,0+1] < 0.88)
lifetime <- which(traindata[,1] < 0.88)
lifetime <- which(traindata[,2] < 0.88)
lifetime <- which(traindata[,3] < 0.88)
lifetime <- which(traindata[,2] < 0.88)
which(traindata[,2] < 0.88)
which(traindata[,4] < 0.88)
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
print(paste("Lifetime",lifetime))
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
print(paste("Time", time))
RULval <- lifetime - time # RUL = total lifetime - t
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
print(paste("Time", time))
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
print(paste("Time", time))
RULval <- lifetime - time # RUL = total lifetime - t
print(paste("RUL", RUL))
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
print(paste("Time", time))
RULval <- lifetime - time # RUL = total lifetime - t
print(paste("RUL", RULval))
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
append(RUL, RULval) # add to RUL vector
}
print(paste("RUL", RULval))
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
print(paste("Time", time))
RULval <- lifetime - time # RUL = total lifetime - t
print(paste("RUL", RULval))
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RUL
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
print(paste("RUL", RULval))
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
for(b in 1:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
print(RULval)
append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
}
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
print(paste("RUL", RULval))
RUL <- append(RUL, RULval) # add to RUL vector
}
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if ((RULval <= 0)){RULval = NA} # ensure RUL is greater than zero
print(paste("RUL", RULval))
RUL <- append(RUL, RULval) # add to RUL vector
}
tail(RUL)
head(RUL)
ncols(RUL)
nrows(RUL)
len(RUL)
length(RUL)
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 1:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
}
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
print("battery done")
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
View(RULdata)
View(RULdata)
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
View(RULdata)
View(RULdata)
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
print("battery done")
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
View(RULdata)
View(RULdata)
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0.88, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,3+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,3+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
print("battery done")
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
View(RULdata)
View(RULdata)
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", 3) # change column name
for(b in 1:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b+1] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b+1] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
print("battery done")
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b) # change column name
}
2:80
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
print("battery done")
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0.88, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
View(RULdata)
View(RULdata)
data.long <- melt(RULdata, id = "capacity")
View(data.long)
View(data.long)
ggplot(data.long, aes(capacity, value, group = variable)) +
xlab("t (cycles)") +
ylab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ggtitle("Battery capacity degradation data (training)") +
geom_line() +
geom_hline(yintercept=0.88,
linetype="dashed",
color = "red",
linewidth=0.5) +
annotate("text", x=1900, y=0.87, label= "Threshold: 0.88", colour = "red", size = 3)
View(data.long)
View(data.long)
load("C:/Users/raque/Documents/GitHub/modellinga/.RData")
traindata <- read.csv("./Data/Battery_train.csv")
library(ggplot2)
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0.88, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
data.long <- melt(RULdata, id = "capacity")
View(data.long)
View(data.long)
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab("t (cycles)") +
ylab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ggtitle("Battery capacity degradation data (training)") +
geom_line() +
geom_hline(yintercept=0.88,
linetype="dashed",
color = "red",
linewidth=0.5) +
annotate("text", x=1900, y=0.87, label= "Threshold: 0.88", colour = "red", size = 3)
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)"
ggtitle("RUL as a function of capacity")
library(ggplot2)
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
# create capacity array with same size as no. of cycles
capacity <- seq(from = 0.88, to = 1.1, by =1.1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)"
ggtitle("RUL as a function of capacity")
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable))
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)"
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)"
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)"
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)" +
ggtitle("RUL as a function of capacity")
data.long <- melt(RULdata, id = "capacity")
ggplot(data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)" +
ggtitle("RUL as a function of capacity")
library(ggplot2)
ggplot(data = data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)" +
ggtitle("RUL as a function of capacity")
data.long <- melt(RULdata, id = "capacity")
ggplot(data = data.long, aes(x = capacity, y = value, group = variable)) +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(~ RUL["t,i"]) ~ "(Cycles)" +
ggtitle("RUL as a function of capacity")
ggplot(data = data.long, aes(x = capacity, y = value, group = variable))
# create capacity array
capacity <- seq(from = 0.88, to = 1.1, by =(1.1-0.88)/(nrow(traindata)-1))
# create capacity array
capacity <- seq(from = 0.88, to = 1.1, by =(1.1-0.88)/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
#if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
data.long <- melt(RULdata, id = "capacity")
View(data.long)
View(data.long)
# create capacity array
capacity <- seq(from = 0.88, to = 1.1, by =1/(nrow(traindata)-1))
# create capacity array
capacity <- seq(from = 0.88, to = 1.1, by =1/(nrow(traindata)-1))
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
#if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
data.long <- melt(RULdata, id = "capacity")
ggplot(data = data.long, aes(x = capacity, y = value, group = variable))
