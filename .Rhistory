library(ggplot2)
install.packages("ggplot2")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
traindat = read.csv("/Users/tyrenkoning/Desktop/University/Modelling-2A/Battery_train.csv")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggplot2")
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
traindat = read.csv("/Users/tyrenkoning/Desktop/University/Modelling-2A/Battery_train.csv")
install.packages("ggplot2")
library(ggplot2)
library(reshape2)
traindata <- read.csv("./Data/Battery_train.csv")
RULdata <- data.frame(capacity)
for(b in 2:ncol(traindata)){ # loop over batteries
RUL = c() # initialize value
for(c in capacity){ # for_loop for each capacity
lifetime <- which(traindata[,b] < 0.88) # find maximum amount of cycles before breakdown
time <- which.min(abs(traindata[,b] - c)) # find time index closest to capacity
RULval <- lifetime - time # RUL = total lifetime - t
#if (RULval <= 0){RULval = NA} # ensure RUL is greater than zero
RUL <- append(RUL, RULval) # add to RUL vector
}
RULdata[ , ncol(RULdata) + 1] <- RUL   # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", b-1) # change column name
}
data.long <- melt(RULdata, id = "capacity") # condense data to long format
traindata <- read.csv("./Data/Battery_train.csv")
library(reshape2)
library(ggplot2)
traindat = read.csv("./Data/Traindatlong.csv")
setwd("~/GitHub/modellinga")
traindat = read.csv("./Data/Traindatlong.csv")
traindat$sqrtRUL = sqrt(traindat$RUL)
traindat$one_thirdRUL = (traindat$RUL)^(1/3)
testdata = read.csv("./Data/Battery_test.csv")
# Get actual RUL of testdata
RULdata <- data.frame(testdata$Cycle) # initalize data
for (i in 1:(ncol(testdata)-1)){ # loop over each battery
c = c(seq(sum(!is.na(testdata[i+1])), sum(!is.na(testdata[i+1]))-
(nrow(testdata)-1), -1))
c[c<0] = 0 # remove negative values
RULdata[ , ncol(RULdata) + 1] <- c # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
# Data formatting
RULdata_long <- melt(RULdata, id = "testdata.Cycle") # long format
testdata_long <- melt(testdata, id = "Cycle")
testdata_long$RUL <- RULdata_long$value # add RULdata to testdata
#testdata_long$sqrtRUL = sqrt(testdata_long$RUL)
#testdata_long$one_thirdRUL = (testdata_long$RUL)^(1/3)
colnames(testdata_long)[2] <- "Battery" # change column names
colnames(testdata_long)[3] <- "Capacity"
View(testdata_long)
View(testdata_long)
# Cost variables
Cr = 3
Cm = 0.5
Cp = 1
tau = 200
cost = c()
View(testdata_long)
View(testdata_long)
save(testdata_long)
save(testdata_long,file="testdata_long.Rda")
# Data formatting
RULdata_long <- melt(RULdata, id = "testdata.Cycle") # long format
testdata_long <- melt(testdata, id = "Cycle")
testdata_long$RUL <- RULdata_long$value # add RULdata to testdata
#testdata_long$sqrtRUL = sqrt(testdata_long$RUL)
#testdata_long$one_thirdRUL = (testdata_long$RUL)^(1/3)
colnames(testdata_long)[2] <- "Battery" # change column names
colnames(testdata_long)[3] <- "Capacity"
# Plot RUL of test data
ggplot(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery)) +
ggtitle("Capacity vs. RUL of test data ") +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL (Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
# DF containing prediction for RUL
predict = data.frame(Capacity = testdata_long$Capacity)
{
#1st ord.
lm1 = lm(RUL~Capacity, data = traindat)
predict$lm1 = predict(lm1, new = testdata_long)
#1st ord. sqrt
lm1sqrt = lm(sqrtRUL~Capacity, data = traindat)
predict$lm1sqrt = predict(lm1sqrt, new = testdata_long)
#1st ord. 1/3
lm1third = lm(one_thirdRUL~Capacity, data = traindat)
predict$lm1third = predict(lm1third, new = testdata_long)
#2nd ord.
lm2 = lm(RUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2 = predict(lm2, new = testdata_long)
#2nd ord. sqrt
lm2sqrt = lm(sqrtRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2sqrt = predict(lm2sqrt, new = testdata_long)
#2nd ord. 1/3
lm2third = lm(one_thirdRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2third = predict(lm2third, new = testdata_long)
#3rd ord.
lm3 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3 = predict(lm3, new = testdata_long)
#3rd ord. sqrt
lm3sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3sqrt = predict(lm3sqrt, new = testdata_long)
#3rd ord. 1/3
lm3third = lm(one_thirdRUL~Capacity + I(Capacity^2)
+ I(Capacity^3), data = traindat)
predict$lm3third = predict(lm3third, new = testdata_long)
#4th ord.
lm4 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3)
+ I(Capacity^4), data = traindat)
predict$lm4 = predict(lm4, new = testdata_long)
#4th ord. sqrt
lm4sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3)
+ I(Capacity^4), data = traindat)
predict$lm4sqrt = predict(lm4sqrt, new = testdata_long)
#4th ord. 1/3
lm4third = lm(one_thirdRUL~Capacity + I(Capacity^2) +
I(Capacity^3) + I(Capacity^4), data = traindat)
predict$lm4third = predict(lm4third, new = testdata_long)
#5th ord.
lm5 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5 = predict(lm5, new = testdata_long)
#5th ord. sqrt
lm5sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5sqrt = predict(lm5sqrt, new = testdata_long)
#5th ord. 1/3
lm5third = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5third = predict(lm5third, new = testdata_long)
}
# set negative values and non-existing values to 0
predict[(predict < 0) | is.na(predict)] = 0
library(reshape2)
library(ggplot2)
traindat = read.csv("./Data/Traindatlong.csv")
traindat$sqrtRUL = sqrt(traindat$RUL)
traindat$one_thirdRUL = (traindat$RUL)^(1/3)
testdata = read.csv("./Data/Battery_test.csv")
# Get actual RUL of testdata
RULdata <- data.frame(testdata$Cycle) # initalize data
for (i in 1:(ncol(testdata)-1)){ # loop over each battery
c = c(seq(sum(!is.na(testdata[i+1])), sum(!is.na(testdata[i+1]))-
(nrow(testdata)-1), -1))
c[c<0] = 0 # remove negative values
RULdata[ , ncol(RULdata) + 1] <- c # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
# Data formatting
RULdata_long <- melt(RULdata, id = "testdata.Cycle") # long format
testdata_long <- melt(testdata, id = "Cycle")
testdata_long$RUL <- RULdata_long$value # add RULdata to testdata
#testdata_long$sqrtRUL = sqrt(testdata_long$RUL)
#testdata_long$one_thirdRUL = (testdata_long$RUL)^(1/3)
colnames(testdata_long)[2] <- "Battery" # change column names
colnames(testdata_long)[3] <- "Capacity"
# Plot RUL of test data
ggplot(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery)) +
ggtitle("Capacity vs. RUL of test data ") +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL (Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
# DF containing prediction for RUL
predict = data.frame(Capacity = testdata_long$Capacity)
{
#1st ord.
lm1 = lm(RUL~Capacity, data = traindat)
predict$lm1 = predict(lm1, new = testdata_long)
#1st ord. sqrt
lm1sqrt = lm(sqrtRUL~Capacity, data = traindat)
predict$lm1sqrt = predict(lm1sqrt, new = testdata_long)
#1st ord. 1/3
lm1third = lm(one_thirdRUL~Capacity, data = traindat)
predict$lm1third = predict(lm1third, new = testdata_long)
#2nd ord.
lm2 = lm(RUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2 = predict(lm2, new = testdata_long)
#2nd ord. sqrt
lm2sqrt = lm(sqrtRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2sqrt = predict(lm2sqrt, new = testdata_long)
#2nd ord. 1/3
lm2third = lm(one_thirdRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2third = predict(lm2third, new = testdata_long)
#3rd ord.
lm3 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3 = predict(lm3, new = testdata_long)
#3rd ord. sqrt
lm3sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3sqrt = predict(lm3sqrt, new = testdata_long)
#3rd ord. 1/3
lm3third = lm(one_thirdRUL~Capacity + I(Capacity^2)
+ I(Capacity^3), data = traindat)
predict$lm3third = predict(lm3third, new = testdata_long)
#4th ord.
lm4 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3)
+ I(Capacity^4), data = traindat)
predict$lm4 = predict(lm4, new = testdata_long)
#4th ord. sqrt
lm4sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3)
+ I(Capacity^4), data = traindat)
predict$lm4sqrt = predict(lm4sqrt, new = testdata_long)
#4th ord. 1/3
lm4third = lm(one_thirdRUL~Capacity + I(Capacity^2) +
I(Capacity^3) + I(Capacity^4), data = traindat)
predict$lm4third = predict(lm4third, new = testdata_long)
#5th ord.
lm5 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5 = predict(lm5, new = testdata_long)
#5th ord. sqrt
lm5sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5sqrt = predict(lm5sqrt, new = testdata_long)
#5th ord. 1/3
lm5third = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3) +
I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5third = predict(lm5third, new = testdata_long)
}
# set negative values and non-existing values to 0
predict[(predict < 0) | is.na(predict)] = 0
View(RULdata)
View(RULdata)
View(RULdata_long)
View(RULdata_long)
save.image("C:/Users/raque/Documents/GitHub/modellinga/Data/data.RData")
View(lm1)
save(lm1,file="lm1.Rda")
load("C:/Users/raque/Documents/GitHub/modellinga/Data/data.RData")
load("C:/Users/raque/Documents/GitHub/modellinga/Data/data.RData")
load("./Data/data.RData")
View(testdata_long)
View(testdata_long)
View(RULdata_long)
rm(RULdata)
rm(RULdata_long)
View(traindat)
View(traindat)
rm(testdata)
save.image("C:/Users/raque/Documents/GitHub/modellinga/Data/linearmodels.RData")
# Load linear models and RULdata
load("./Data/linearmodels.RData")
View(predict)
View(predict)
View(predict)
View(predict)
traindata_long = traindat
rm(traindat)
rm(predict)
save.image("C:/Users/raque/Documents/GitHub/modellinga/linearmodels.RData")
# Load linear models and RULdata
load("./Data/linearmodels.RData")
View(traindata_long)
View(traindata_long)
View(testdata_long)
View(testdata_long)
predict = data.frame(Capacity = traindata_long$Capacity)
predict$lm2third = predict(lm2third, new = traindata_long)
View(predict)
View(predict)
View(predict)
View(predict)
View(traindata_long)
View(traindata_long)
View(testdata_long)
View(testdata_long)
View(testdata_long)
View(testdata_long)
predict$Battery = traindata_long$Battnum
predict$lm2third = predict(lm2third, new = traindata_long)
traindata_long = subset(traindata_long, select = -c(sqrtRUL, one_thirdRUL) )
View(traindata_long)
View(traindata_long)
rm(predict)
save(testdata_long, file = testdata_long.Rda)
save(testdata_long, file = testdata_long.RDa)
save(testdata_long, file = "testdata_long.Rda")
save(traindata_long, file = "traindata_long.Rda")
load("~/GitHub/modellinga/Data/testdata_long.Rda")
# Load linear models and RULdata
load("~/Data/testdata_long.Rda")
# Load linear models and RULdata
load("./Data/testdata_long.Rda")
load("./Data/traindata_long.Rda")
rm(traindata_long)
rm(testdata_long)
save.image("C:/Users/raque/Documents/GitHub/modellinga/linearmodels.RData")
load("~/GitHub/modellinga/Data/linearmodels.RData")
# Load linear models and RULdata
load("./Data/testdata_long.Rda")
load("./Data/traindata_long.Rda")
View(testdata_long)
View(testdata_long)
View(traindata_long)
View(traindata_long)
# Add prediction
traindata_long$predictedRUL = predict(lm2third, new = traindata_long)
# Add prediction
traindata_long$predictedRUL = predict(lm2third, new = traindata_long$Capacity)
predict$lm3third = predict(lm3third, new = testdata_long)
# DF containing prediction for RUL
predict = data.frame(Capacity = testdata_long$Capacity)
predict$lm2sqrt = predict(lm2sqrt, new = testdata_long)
View(predict)
View(predict)
# Add prediction
traindata_long$predictedRUL = predict(lm2third, new = traindata_long$Capacity)
View(lm5third)
View(lm5third)
View(testdata_long)
View(testdata_long)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL (Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = traindata_long,
aes(x = Capacity, y = RUL, group = Battery), size=0.5,lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict,
aes(x = traindata_long$predictedRUL, y = lm2third, color = 'red'),linewidth=0.5)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL (Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = traindata_long,
aes(x = Capacity, y = RUL, group = Battnum), size=0.5,lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict,
aes(x = traindata_long$predictedRUL, y = lm2third, color = 'red'),linewidth=0.5)
# Load linear models and RULdata
load("./Data/testdata_long.Rda")
load("./Data/traindata_long.Rda")
load("./Data/linearmodels.RData")
# Add prediction
traindata_long$RULhat = predict(lm2third, new = traindata_long)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL (Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = traindata_long,
aes(x = Capacity, y = RUL, group = Battnum), size=0.5,lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = traindata_long,
aes(x = Capacity, y = RULhat, color = 'red'),linewidth=0.5)
# Add prediction
traindata_long$RULhat = predict(lm2third, new = traindata_long$Capacity)
# Add prediction
traindata_long$RULhat = predict(lm2third, newdata =  traindata_long$Capacity)
# set negative values and non-existing values to 0
predict[(predict < 0) | is.na(predict)] = 0
# Add prediction
capacity <- data.frame(traindata_long$Capacity)
traindata_long$RULhat = predict(lm2third, newdata = capacity)
# Add prediction
capacity <- data.frame(traindata_long$Capacity)
traindata_long$RULhat = predict(lm2third, newdata = capacity)
# Add prediction
traindata_long$RULhat = predict(lm2third, newdata = traindata_long)
rm(capacity)
View(traindata_long)
View(traindata_long)
# Add prediction
traindata_long$RULhat = predict(lm2, newdata = traindata_long)
predict(lm2, newdata = traindata_long, interval = confidence)
predict(lm2, newdata = traindata_long, interval = 'confidence")
predict(lm2, newdata = traindata_long, interval = confidence")
# Add prediction
traindata_long$RULhat = predict(lm2, newdata = traindata_long, interval = "confidence")
