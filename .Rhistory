for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i] <-MSE1
MSE[,i+1] <- MSE2
MSE[,i+2] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
for (i in seq(1,ncol(predict)-1,3)){ # loop over each linear fit in steps of 3
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i] <-MSE1
MSE[,i+1] <- MSE2
MSE[,i+2] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(1,ncol(predict)-1,3)){ # loop over each linear fit in steps of 3
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i] <-MSE1
MSE[,i+1] <- MSE2
MSE[,i+2] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i] <-MSE1
MSE[,i+1] <- MSE2
MSE[,i+2] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
MSE[,1]
MSE[,2]
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i] <-MSE1
MSE[,i+1] <- MSE2
MSE[,i+2] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i-1] <-MSE1
MSE[,i] <- MSE2
MSE[,i+1] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i-1] <-MSE1
MSE[,i] <- MSE2
MSE[,i+1] <- MSE3
#MSE[,i:i+2] <- c(MSE1,MSE2,MSE3) # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
#MSE[,i-1] <-MSE1
#MSE[,i] <- MSE2
#MSE[,i+1] <- MSE3
MSE[,i-1:i+1] <- c(MSE1,MSE2,MSE3) # Append new values
}
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
#MSE[,i-1] <-MSE1
#MSE[,i] <- MSE2
#MSE[,i+1] <- MSE3
MSE[i-1:i+1,] <- c(MSE1,MSE2,MSE3) # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i-1] <-MSE1
MSE[,i] <- MSE2
MSE[,i+1] <- MSE3 # Append new values
}
#MSE[j,i+1] = rowMeans(MSE[j,]) # append total MSE of method
# Make scatterplot of MSE
x <- seq(1,ncol(MSE)-1)
plot(x, MSE[-ncol(MSE)], main="Scatterplot of MSE using a first-order linear approximation",
xlab="Battery No. ", ylab="MSE ", pch=19)
View(MSE)
View(MSE)
# Calculate MSE for each method
MSE = data.frame() # initialize MSE
#colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
colnames(MSE) <- "MSE"
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[i-1] <-MSE1
MSE[i] <- MSE2
MSE[i+1] <- MSE3 # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = 1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i-1] <-MSE1
MSE[,i] <- MSE2
MSE[,i+1] <- MSE3 # Append new values
}
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[i-1] <-MSE1
MSE[i] <- MSE2
MSE[i+1] <- MSE3 # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = 1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[i-1] <-MSE1
MSE[i] <- MSE2
MSE[i+1] <- MSE3 # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = 1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[i-1,] <-MSE1
MSE[,] <- MSE2
MSE[i+1,] <- MSE3 # Append new values
}
# Calculate MSE for each method
MSE = data.frame(matrix(ncol = ncol(predict)-1)) # initialize MSE
colnames(MSE) <- paste0("Method ", seq(1,ncol(predict)-1))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE1 = mean((testdata_long$RUL - predict[,i])^2) # calculate MSE
MSE2 = mean((sqrt(testdata_long$RUL) - predict[,i+1])^2) # sqrt method
MSE3 = mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2) # inverse cube
print(c(MSE1,MSE2,MSE3))
MSE[,i-1] <-MSE1
MSE[,i] <- MSE2
MSE[,i+1] <- MSE3
#MSE[,i-1:i+1] <- c(MSE1,MSE2,MSE3) # Append new values
}
View(MSE)
View(MSE)
MSE = c()
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = MSE.append(mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = MSE.append(mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = MSE.append((((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
print(c(MSE1,MSE2,MSE3))
}
MSE = c()
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
print(c(MSE1,MSE2,MSE3))
}
MSE
# Make scatterplot of MSE
x <- seq(1,ncol(MSE)-1)
plot(x, MSE[-ncol(MSE)], main="Scatterplot of MSE using a first-order linear approximation",
xlab="Battery No. ", ylab="MSE ", pch=19)
# Make scatterplot of MSE
x <- seq(1,len(MSE)-1)
# Make scatterplot of MSE
x <- seq(1,size(MSE)-1)
# Make scatterplot of MSE
x <- seq(1,length(MSE)-1)
# Make scatterplot of MSE
x <- seq(1,length(MSE)-1)
plot(x, MSE, main="Scatterplot of MSE using a first-order linear approximation",
xlab="Battery No. ", ylab="MSE ", pch=19)
# Make scatterplot of MSE
x <- seq(1,length(MSE))
plot(x, MSE, main="Scatterplot of MSE using a first-order linear approximation",
xlab="Battery No. ", ylab="MSE ", pch=19)
print(MSE)
error <- data.frame(NULL)
error$MSE <- MSE
View(error)
View(error)
error <- data.frame()
error$MSE <- MSE
error <- data.frame(MSE = MSE)
View(error)
View(error)
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1, color = 'Red') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1, color = 'Red') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = Capacity, y = lm2, color = 'blue') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red', lty=3) ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') ) +
labs(fill = "Dose (mg)")
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') ) +
labs(colour = "Dose (mg)")
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5, color = 'orange') ) +
labs(colour = "Linear model", blue ="First order")
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = sqrt(RUL), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1sqrt, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2sqrt, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3sqrt, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4sqrt, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5sqrt, color = 'orange') )
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') )
library(MLmetrics)
install.packages("MLmetric")
install.packages("MLmetrics")
library(MLmetrics)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
MAPE = append(MAPE,mean(abs((testdata_long$RUL-predict[,i])/testdata_long$RUL)) * 100)
MAPE = append(MAPE,mean(abs((sqrt(testdata_long$RUL)-predict[,i])/sqrt(testdata_long$RUL))) * 100)
MAPE = append(MAPE,mean(abs(((testdata_long$RUL)^(1/3)-predict[,i])/((testdata_long$RUL)^(1/3)))) * 100)
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
MAPE = append(MAPE,mean(abs((testdata_long$RUL-predict[,i])/testdata_long$RUL)) * 100)
MAPE = append(MAPE,mean(abs((sqrt(testdata_long$RUL)-predict[,i+1])/sqrt(testdata_long$RUL))) * 100)
MAPE = append(MAPE,mean(abs(((testdata_long$RUL)^(1/3)-predict[,i+2])/((testdata_long$RUL)^(1/3)))) * 100)
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
