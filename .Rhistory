geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3sqrt, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4sqrt, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5sqrt, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
# Plot fits on square
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL on square root of data ") +
geom_path(data = testdata_long, aes(x = Capacity, y = sqrt(RUL), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1sqrt, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2sqrt, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3sqrt, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4sqrt, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5sqrt, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
# Plot fits on square
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL on square root of data ") +
geom_path(data = testdata_long, aes(x = Capacity, y = sqrt(RUL), group = Battery), size=0.5, lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1sqrt, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2sqrt, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3sqrt, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4sqrt, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5sqrt, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') ) +
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5, lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
ggplot() +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
ggtitle("Predicted RUL vs. actual RUL of data^(1/3)") +
geom_path(data = testdata_long, aes(x = Capacity, y = RUL^(1/3), group = Battery), size=0.5, lty=2) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank()) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm1third, color = 'red') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm2third, color = 'blue') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm3third, color = 'green') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm4third, color = 'yellow') ) +
geom_line(data = predict, aes(x = testdata_long$Capacity, y = lm5third, color = 'orange') ) +
labs(colour="Linear model") +
scale_color_manual(labels = c("Fifth order", "Fourth order","Third order", "Second order","First order"), values = c("red","blue", "green","purple","orange"))
View(error)
View(error)
(testdata_long$RUL-predict[,2])/testdata_long$RUL)
(testdata_long$RUL-predict[,2])/testdata_long$RUL
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL)) * 100
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL)) * 100)
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100)
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100
mean(abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100)
mean((abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100)[is.na(abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100)])
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100)
abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100
x = abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100
x[x==NaN] = 0
x
x <- na.omit(x)
x
mean(x1)
mean(x)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
x1 = abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1 <- na.omit(x1) # remove NaN
MAPE = append(MAPE,x1)
# same for sqrt
x2 = abs((sqrt(testdata_long$RUL)-predict[,i])/sqrt(testdata_long$RUL)) * 100
x2 <- na.omit(x2) # remove NaN
MAPE = append(MAPE,x2)
# Inverse cube
x3 = abs(((testdata_long$RUL)^(1/3)-predict[,i])/((testdata_long$RUL)^(1/3))) * 100 # calculate absolute percentage error
x3 <- na.omit(x3) # remove NaN
MAPE = append(MAPE,x3)
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
View(error)
View(error)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
library(reshape2)
library(ggplot2)
traindat = read.csv("./Data/Traindatlong.csv")
traindat$sqrtRUL = sqrt(traindat$RUL)
traindat$one_thirdRUL = (traindat$RUL)^(1/3)
testdata = read.csv("./Data/Battery_test.csv")
# Get actual RUL of testdata
RULdata <- data.frame(testdata$Cycle) # initalize data
for (i in 1:(ncol(testdata)-1)){ # loop over each battery
c = c(seq(sum(!is.na(testdata[i+1])), sum(!is.na(testdata[i+1]))-(nrow(testdata)-1), -1))
c[c<0] = 0 # remove negative values
RULdata[ , ncol(RULdata) + 1] <- c # Append new column
colnames(RULdata)[ncol(RULdata)] <- paste0("NO.", i)
}
# Data formatting
RULdata_long <- melt(RULdata, id = "testdata.Cycle") # long format
testdata_long <- melt(testdata, id = "Cycle")
testdata_long$RUL <- RULdata_long$value # add RULdata to testdata
#testdata_long$sqrtRUL = sqrt(testdata_long$RUL)
#testdata_long$one_thirdRUL = (testdata_long$RUL)^(1/3)
colnames(testdata_long)[2] <- "Battery" # change column names
colnames(testdata_long)[3] <- "Capacity"
# Plot RUL of test data
ggplot(data = testdata_long, aes(x = Capacity, y = RUL, group = Battery)) +
ggtitle("Capacity vs. RUL of test data ") +
xlab(bquote("Capacity" ~ C["t,i"] ~ "(Ah)")) +
ylab(bquote("RUL" ~ C["t,i"] ~ "(Cycles)")) +
#ggtitle("Figure 2: RUL (training)") +
geom_path(size=0.5) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 12),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank())
# Fit Linear models
predict = data.frame(Capacity = testdata_long$Capacity) # DF containing prediction for RUL
{
#1st ord.
lm1 = lm(RUL~Capacity, data = traindat)  # Create a linear regression with two variables
predict$lm1 = predict(lm1, new = testdata_long)
#1st ord. sqrt
lm1sqrt = lm(sqrtRUL~Capacity, data = traindat)
predict$lm1sqrt = predict(lm1sqrt, new = testdata_long)
#1st ord. 1/3
lm1third = lm(one_thirdRUL~Capacity, data = traindat)
predict$lm1third = predict(lm1third, new = testdata_long)
#2nd ord.
lm2 = lm(RUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2 = predict(lm2, new = testdata_long)
#2nd ord. sqrt
lm2sqrt = lm(sqrtRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2sqrt = predict(lm2sqrt, new = testdata_long)
#2nd ord. 1/3
lm2third = lm(one_thirdRUL~Capacity + I(Capacity^2), data = traindat)
predict$lm2third = predict(lm2third, new = testdata_long)
#3rd ord.
lm3 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3 = predict(lm3, new = testdata_long)
#3rd ord. sqrt
lm3sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3sqrt = predict(lm3sqrt, new = testdata_long)
#3rd ord. 1/3
lm3third = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3), data = traindat)
predict$lm3third = predict(lm3third, new = testdata_long)
#4th ord.
lm4 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4), data = traindat)
predict$lm4 = predict(lm4, new = testdata_long)
#4th ord. sqrt
lm4sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4), data = traindat)
predict$lm4sqrt = predict(lm4sqrt, new = testdata_long)
#4th ord. 1/3
lm4third = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4), data = traindat)
predict$lm4third = predict(lm4third, new = testdata_long)
#5th ord.
lm5 = lm(RUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5 = predict(lm5, new = testdata_long)
#5th ord. sqrt
lm5sqrt = lm(sqrtRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5sqrt = predict(lm5sqrt, new = testdata_long)
#5th ord. 1/3
lm5third = lm(one_thirdRUL~Capacity + I(Capacity^2) + I(Capacity^3) + I(Capacity^4) + I(Capacity^5), data = traindat)
predict$lm5third = predict(lm5third, new = testdata_long)
}
predict[(predict < 0) | is.na(predict)] = 0 # set negative values and non-existing values to 0
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
#x1 = abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100 # calculate absolute percentage error
#x1 <- na.omit(x1) # remove NaN
#MAPE = append(MAPE,x1)
# same for sqrt
#x2 = abs((sqrt(testdata_long$RUL)-predict[,i])/sqrt(testdata_long$RUL)) * 100
#x2 <- na.omit(x2) # remove NaN
#MAPE = append(MAPE,x2)
# Inverse cube
#x3 = abs(((testdata_long$RUL)^(1/3)-predict[,i])/((testdata_long$RUL)^(1/3))) * 100 # calculate absolute percentage error
#x3 <- na.omit(x3) # remove NaN
#MAPE = append(MAPE,x3)
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
x1 = abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] == 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
x2 = abs((sqrt(testdata_long$RUL)-predict[,i])/sqrt(testdata_long$RUL)) * 100
x2[is.na(x2)] == 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
x3 = abs(((testdata_long$RUL)^(1/3)-predict[,i])/((testdata_long$RUL)^(1/3))) * 100 # calculate absolute percentage error
x3[is.na(x3)] == 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
abs((testdata_long$RUL-predict[,2])/testdata_long$RUL) * 100
x1 = abs((testdata_long$RUL-predict[,2])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] == 0 # set NaN to 0
x1 = abs((testdata_long$RUL-predict[,2])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[x1==NaN)] == 0 # set NaN to 0
x1 = abs((testdata_long$RUL-predict[,2])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[x1==NaN] == 0 # set NaN to 0
x1 = abs((testdata_long$RUL-predict[,2])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
x1
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
x1 = abs((testdata_long$RUL-predict[,i])/testdata_long$RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
x2 = abs((sqrt(testdata_long$RUL)-predict[,i])/sqrt(testdata_long$RUL)) * 100
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
x3 = abs(((testdata_long$RUL)^(1/3)-predict[,i])/((testdata_long$RUL)^(1/3))) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
error <- data.frame(MSE = MSE, MAPE = MAPE)
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
RUL  = testdata_long$RUL
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
RUL = sqrt(testdata_long$RUL)
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
RUL = testdata_long$RUL^(1/3)
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
error <- data.frame(MSE = MSE, MAPE = MAPE)
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
RUL  = testdata_long$RUL
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
RUL = sqrt(testdata_long$RUL)
x1 = abs((RUL-predict[,i+1])/RUL) * 100 # calculate absolute percentage error
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
RUL = testdata_long$RUL^(1/3)
x1 = abs((RUL-predict[,i+2])/RUL) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
error <- data.frame(MSE = MSE, MAPE = MAPE)
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
RUL  = testdata_long$RUL
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
RUL = sqrt(testdata_long$RUL)
x2 = abs((RUL-predict[,i+1])/RUL) * 100 # calculate absolute percentage error
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
RUL = testdata_long$RUL^(1/3)
x3 = abs((RUL-predict[,i+2])/RUL) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
}
View(error)
View(error)
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
MAPE = append(MAPE,mean(x3))
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
RUL  = testdata_long$RUL
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
RUL = sqrt(testdata_long$RUL)
x2 = abs((RUL-predict[,i+1])/RUL) * 100 # calculate absolute percentage error
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
RUL = testdata_long$RUL^(1/3)
x3 = abs((RUL-predict[,i+2])/RUL) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x3))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
# Calculate errors for each method
MSE = c() # mean squared error
MAPE = c() # mean absolute percentage error
error <- data.frame(MSE = MSE, MAPE = MAPE)
for (i in seq(2,ncol(predict),3)){ # loop over each linear fit in steps of 3
print(i)
MSE = append(MSE,mean((testdata_long$RUL - predict[,i])^2)) # calculate MSE
MSE = append(MSE,mean((sqrt(testdata_long$RUL) - predict[,i+1])^2)) # sqrt method
MSE = append(MSE,mean(((testdata_long$RUL)^(1/3) - predict[,i+2])^2)) # inverse cube
RUL  = testdata_long$RUL
x1 = abs((RUL-predict[,i])/RUL) * 100 # calculate absolute percentage error
x1[is.na(x1)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x1))
# same for sqrt
RUL = sqrt(testdata_long$RUL)
x2 = abs((RUL-predict[,i+1])/RUL) * 100 # calculate absolute percentage error
x2[is.na(x2)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x2))
# Inverse cube
RUL = testdata_long$RUL^(1/3)
x3 = abs((RUL-predict[,i+2])/RUL) * 100 # calculate absolute percentage error
x3[is.na(x3)] <- 0 # set NaN to 0
MAPE = append(MAPE,mean(x3))
}
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
paste0("NO.", seq(1,3))
paste0("NO.", seq(1,3,2))
paste0("NO.", seq(1,15,2))
paste0("lm", seq(1,5))
seq(1,15,2)
rownames(error)[seq(1,15,2)] <- paste0("lm", seq(1,5))
rownames(error) <- paste0("lm", seq(1,5))
rownames(error) <- paste0("lm", seq(1,15))
View(error)
View(error)
rownames(error) <- paste0("lm", seq(1,15,2))
rownames(error) <- paste0("lm", seq(1,15)
View(error)
View(error)
rownames(error)[1,2]
rownames(error)[1]
rownames(error)[1:2]
rownames(error)[seq(1,15,2)]
rownames(error)[seq(1,15,3)]
rownames(error)[seq(1,15,3)] <- paste0("lm", seq(1,5))
error <- data.frame(MSE = MSE, MAPE = MAPE)
View(error)
View(error)
rownames(error)[seq(1,15,3)] <- paste0("lm", seq(1,5))
View(error)
View(error)
rownames(error)[seq(1,15,3)] <- paste0("lm", seq(1,5))
View(error)
View(error)
seq(2,15,3)
paste0("lm", seq(1,5),"sqrt")
rownames(error)[seq(2,15,3)] <- paste0("lm", seq(1,5),"sqrt")
View(error)
View(error)
seq(3,15,3)
rownames(error)[seq(3,15,3)] <- paste0("lm", seq(1,5),"^(1/3)")
View(error)
View(error)
