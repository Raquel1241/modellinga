RULhat$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhat$lm4third = predict(lm4third, new = traindata_long)
RULhat$lm5 = predict(lm5, new = traindata_long)
RULhat$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhat$lm5third = predict(lm5third, new = traindata_long)
RULhat[(RULhat < 0)|is.na(RULhat)] = 0 # set negative values to 0
}
View(RULhat)
View(RULhat)
# Run simulation
N = 1 # No. of batteries to test
#  select N batteries without replacement
battIndex = sample.int(max(traindata_long$Battnum),N, replace=FALSE)
battIndex
batteries = subset(traindata_long, Battnum %in% battIndex) # subset of traindata
View(batteries)
View(batteries)
RULtrue <- traindata_long$RUL
RULtrue
View(batteries)
RULtrue <- batteries$RUL
RULhat <- subset(traindata_long, Battnum %in% battIndex)
View(RULhat)
RULhat <- subset(RULhat, Battnum %in% battIndex)
# Add predictions
{
RULhat <- data.frame(Cycle=traindata_long$Cycle, Battnum=traindata_long$Battnum)
RULhat$lm1 <- predict(lm1, newdata = traindata_long)
RULhat$lm1sqrt = predict(lm1sqrt, new = traindata_long)
RULhat$lm1third = predict(lm1third, new = traindata_long)
RULhat$lm2 = predict(lm2, new = traindata_long)
RULhat$lm2sqrt = predict(lm2sqrt, new = traindata_long)
RULhat$lm2third = predict(lm2third, new = traindata_long)
RULhat$lm3 = predict(lm3, new = traindata_long)
RULhat$lm3sqrt = predict(lm3sqrt, new = traindata_long)
RULhat$lm3third = predict(lm3third, new = traindata_long)
RULhat$lm4 = predict(lm4, new = traindata_long)
RULhat$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhat$lm4third = predict(lm4third, new = traindata_long)
RULhat$lm5 = predict(lm5, new = traindata_long)
RULhat$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhat$lm5third = predict(lm5third, new = traindata_long)
RULhat[(RULhat < 0)|is.na(RULhat)] = 0 # set negative values to 0
}
RULhat <- subset(RULhat, Battnum %in% battIndex)
View(RULhat)
cost = c()
calculateCost(Cr,Cm,Cp,time[1], RULhat, RULtrue)
time[1]
time(1)
time = seq(0, t_end, tau)[-1] # {200, 400, ...,2000}
time[1]
calculateCost(Cr,Cm,Cp,time[1], RULhat, RULtrue)
#setwd("~/GitHub/modellinga")
library(dplyr)
# Load train and test data and linear models
load("./Data/traindata_long.Rda")
load("./Data/testdata_long.Rda")
load("./Data/linearmodels.RData")
traindata <- read.csv("./Data/Battery_train.csv", header=TRUE)
testdata <-  read.csv("./Data/Battery_test.csv", header=TRUE)
# Calculate total cost of inspection policy
calculateCost <- function(Cr,Cm,Cp,tau, RULhat, RULtrue) {
# INPUT
#   Cr:       replacement cost, INT
#   Cm:       maintenance cost, INT
#   Cp:       penalty cost, INT
#   tau:      inspection period
#   RULhat:   vector containing predicted RUL, based on linear model
#   RULtrue:  vector containing true RUL
# OUTPUT
#   cost:     cost of inspection at t cycles, integer
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep batter
COST =  case_when( # define new cost
RULhat[tau] < tau ~ Cr + Cm,
RULhat[tau] > tau & RULtrue[tau] < tau  ~ Cr + Cp + Cm,
RULhat[tau] > tau & RULtrue[tau] > tau  ~ Cm,
TRUE ~ 0)
replace =  case_when( # replace battery?
RULhat[tau] < tau ~ FALSE,
RULhat[tau] >= tau ~ TRUE)
return(cost)
}
# Cost variables
Cr = 3        # replacement cost
Cm = 0.5      # maintenance cost
Cp = 1        # penalty cost
tau = 200     # inspection period
t_end = 2000  # end of inspection
# Add predictions
{
RULhat <- data.frame(Cycle=traindata_long$Cycle, Battnum=traindata_long$Battnum)
RULhat$lm1 <- predict(lm1, newdata = traindata_long)
RULhat$lm1sqrt = predict(lm1sqrt, new = traindata_long)
RULhat$lm1third = predict(lm1third, new = traindata_long)
RULhat$lm2 = predict(lm2, new = traindata_long)
RULhat$lm2sqrt = predict(lm2sqrt, new = traindata_long)
RULhat$lm2third = predict(lm2third, new = traindata_long)
RULhat$lm3 = predict(lm3, new = traindata_long)
RULhat$lm3sqrt = predict(lm3sqrt, new = traindata_long)
RULhat$lm3third = predict(lm3third, new = traindata_long)
RULhat$lm4 = predict(lm4, new = traindata_long)
RULhat$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhat$lm4third = predict(lm4third, new = traindata_long)
RULhat$lm5 = predict(lm5, new = traindata_long)
RULhat$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhat$lm5third = predict(lm5third, new = traindata_long)
RULhat[(RULhat < 0)|is.na(RULhat)] = 0 # set negative values to 0
}
# Run simulation
N = 1 # No. of batteries to test
#  select N batteries without replacement
battIndex = sample.int(max(traindata_long$Battnum),N, replace=FALSE)
batteries = subset(traindata_long, Battnum %in% battIndex) # subset of traindata
RULtrue <- batteries$RUL
RULhat <- subset(RULhat, Battnum %in% battIndex)
calculateCost(Cr,Cm,Cp,tau, RULhat, RULtrue)
calculateCost(Cr,Cm,Cp,time[1], RULhat, RULtrue)
# Calculate total cost of inspection policy
calculateCost <- function(Cr,Cm,Cp,tau, RULhat, RULtrue) {
# INPUT
#   Cr:       replacement cost, INT
#   Cm:       maintenance cost, INT
#   Cp:       penalty cost, INT
#   tau:      inspection period
#   RULhat:   vector containing predicted RUL, based on linear model
#   RULtrue:  vector containing true RUL
# OUTPUT
#   cost:     cost of inspection at t cycles, integer
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep batter
cost = numeric(0)
cost =  case_when( # define new cost
RULhat[tau] < tau ~ Cr + Cm,
RULhat[tau] > tau & RULtrue[tau] < tau  ~ Cr + Cp + Cm,
RULhat[tau] > tau & RULtrue[tau] > tau  ~ Cm,
TRUE ~ 0)
return(cost)
}
calculateCost(Cr,Cm,Cp,time[1], RULhat, RULtrue)
RULhat[200]
View(RULhat)
calculateCost(Cr,Cm,Cp,time[1], RULhat$lm1, RULtrue)
# Calculate total cost of inspection policy
calculateCost <- function(Cr,Cm,Cp,tau, RULhat, RULtrue) {
# INPUT
#   Cr:       replacement cost, INT
#   Cm:       maintenance cost, INT
#   Cp:       penalty cost, INT
#   tau:      inspection period
#   RULhat:   vector containing predicted RUL, based on linear model
#   RULtrue:  vector containing true RUL
# OUTPUT
#   cost:     cost of inspection at t cycles, integer
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep batter
cost =  case_when( # define new cost
RULhat[tau] < tau ~ Cr + Cm,
RULhat[tau] > tau & RULtrue[tau] < tau  ~ Cr + Cp + Cm,
RULhat[tau] > tau & RULtrue[tau] > tau  ~ Cm,
TRUE ~ 0)
replace =  case_when( # replace battery?
RULhat[tau] < tau ~ FALSE,
RULhat[tau] >= tau ~ TRUE,
TRUE ~ FALSE)
return(cost,replace)
}
calculateCost(Cr,Cm,Cp,time[1], RULhat$lm1, RULtrue)
replaceBatt <- function(RULhat,tau){
replace =  case_when( # replace battery?
RULhat[tau] < tau ~ FALSE,
RULhat[tau] >= tau ~ TRUE,
TRUE ~ FALSE)
return(replace)
}
# Calculate total cost of inspection policy
calculateCost <- function(Cr,Cm,Cp,tau, RULhat, RULtrue) {
# INPUT
#   Cr:       replacement cost, INT
#   Cm:       maintenance cost, INT
#   Cp:       penalty cost, INT
#   tau:      inspection period
#   RULhat:   vector containing predicted RUL, based on linear model
#   RULtrue:  vector containing true RUL
# OUTPUT
#   cost:     cost of inspection at t cycles, integer
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep batter
cost =  case_when( # define new cost
RULhat[tau] < tau ~ Cr + Cm,
RULhat[tau] > tau & RULtrue[tau] < tau  ~ Cr + Cp + Cm,
RULhat[tau] > tau & RULtrue[tau] > tau  ~ Cm,
TRUE ~ 0)
return(cost)
}
RULhat <- subset(RULhat, Battnum %in% battIndex)$lm1
# Add predictions
{
RULhat <- data.frame(Cycle=traindata_long$Cycle, Battnum=traindata_long$Battnum)
RULhat$lm1 <- predict(lm1, newdata = traindata_long)
RULhat$lm1sqrt = predict(lm1sqrt, new = traindata_long)
RULhat$lm1third = predict(lm1third, new = traindata_long)
RULhat$lm2 = predict(lm2, new = traindata_long)
RULhat$lm2sqrt = predict(lm2sqrt, new = traindata_long)
RULhat$lm2third = predict(lm2third, new = traindata_long)
RULhat$lm3 = predict(lm3, new = traindata_long)
RULhat$lm3sqrt = predict(lm3sqrt, new = traindata_long)
RULhat$lm3third = predict(lm3third, new = traindata_long)
RULhat$lm4 = predict(lm4, new = traindata_long)
RULhat$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhat$lm4third = predict(lm4third, new = traindata_long)
RULhat$lm5 = predict(lm5, new = traindata_long)
RULhat$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhat$lm5third = predict(lm5third, new = traindata_long)
RULhat[(RULhat < 0)|is.na(RULhat)] = 0 # set negative values to 0
}
# Add predictions
{
RULhatdata <- data.frame(Cycle=traindata_long$Cycle, Battnum=traindata_long$Battnum)
RULhatdata$lm1 <- predict(lm1, newdata = traindata_long)
RULhatdata$lm1sqrt = predict(lm1sqrt, new = traindata_long)
RULhatdata$lm1third = predict(lm1third, new = traindata_long)
RULhatdata$lm2 = predict(lm2, new = traindata_long)
RULhatdata$lm2sqrt = predict(lm2sqrt, new = traindata_long)
RULhatdata$lm2third = predict(lm2third, new = traindata_long)
RULhatdata$lm3 = predict(lm3, new = traindata_long)
RULhatdata$lm3sqrt = predict(lm3sqrt, new = traindata_long)
RULhatdatadata$lm3third = predict(lm3third, new = traindata_long)
RULhatdatadata$lm4 = predict(lm4, new = traindata_long)
RULhatdatadata$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhatdatadata$lm4third = predict(lm4third, new = traindata_long)
RULhatdata$lm5 = predict(lm5, new = traindata_long)
RULhatdata$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhatdata$lm5third = predict(lm5third, new = traindata_long)
RULhatdata[(RULhatdata < 0)|is.na(RULhatdata)] = 0 # set negative values to 0
}
# Add predictions
{
RULhatdata <- data.frame(Cycle=traindata_long$Cycle, Battnum=traindata_long$Battnum)
RULhatdata$lm1 <- predict(lm1, newdata = traindata_long)
RULhatdata$lm1sqrt = predict(lm1sqrt, new = traindata_long)
RULhatdata$lm1third = predict(lm1third, new = traindata_long)
RULhatdata$lm2 = predict(lm2, new = traindata_long)
RULhatdata$lm2sqrt = predict(lm2sqrt, new = traindata_long)
RULhatdata$lm2third = predict(lm2third, new = traindata_long)
RULhatdata$lm3 = predict(lm3, new = traindata_long)
RULhatdata$lm3sqrt = predict(lm3sqrt, new = traindata_long)
RULhatdata$lm3third = predict(lm3third, new = traindata_long)
RULhatdata$lm4 = predict(lm4, new = traindata_long)
RULhatdata$lm4sqrt = predict(lm4sqrt, new = traindata_long)
RULhatdata$lm4third = predict(lm4third, new = traindata_long)
RULhatdata$lm5 = predict(lm5, new = traindata_long)
RULhatdata$lm5sqrt = predict(lm5sqrt, new = traindata_long)
RULhatdata$lm5third = predict(lm5third, new = traindata_long)
RULhatdata[(RULhatdata < 0)|is.na(RULhatdata)] = 0 # set negative values to 0
}
RULhat <- subset(RULhatdata, Battnum %in% battIndex)$lm1
View(RULhatdata)
calculateCost(Cr,Cm,Cp,200, RULhat, RULtrue)
calculateCost(Cr,Cm,Cp,400, RULhat, RULtrue)
for (t in time) { # Calculate cost of each method at each inspection time
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, RULhat, RULtrue))
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
replaceBattery <- function(RULhat,tau){
replace =  case_when( # replace battery?
RULhat[tau] < tau ~ FALSE,
RULhat[tau] >= tau ~ TRUE,
TRUE ~ FALSE)
return(replace)
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
# Calculate total cost of inspection policy
calculateCost <- function(Cr,Cm,Cp,t, tau, RULhat, RULtrue) {
# INPUT
#   Cr:       replacement cost, INT
#   Cm:       maintenance cost, INT
#   Cp:       penalty cost, INT
#   t:        time of inspection, INT
#   tau:      inspection period
#   RULhat:   vector containing predicted RUL, based on linear model
#   RULtrue:  vector containing true RUL
# OUTPUT
#   cost:     cost of inspection at t cycles, integer
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep batter
cost =  case_when( # define new cost
RULhat[t] < tau ~ Cr + Cm,
RULhat[t] > tau & RULtrue[t] < tau  ~ Cr + Cp + Cm,
RULhat[t] > tau & RULtrue[t] > tau  ~ Cm,
TRUE ~ 0)
return(cost)
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
battIndex = 1
RULtrue <- batteries$RUL
RULhat <- subset(RULhatdata, Battnum %in% battIndex)$lm1
calculateCost(Cr,Cm,Cp,tau, RULhat, RULtrue)
time = seq(0, t_end, tau)[-1] # {200, 400, ...,2000}
cost = c()
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
# Function that determines if a battery should be replaced
replaceBattery <- function(RULhat,t,tau){
# INPUT
#   RULhat:   vector containing predicted RUL, based on linear model
#   t:        time of inspection, INT
#   tau:      inspection period
# OUTPUT
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep battery
replace =  case_when( # replace battery?
RULhat[t] < tau ~ FALSE,
RULhat[t] >= tau ~ TRUE,
TRUE ~ FALSE)
return(replace)
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(replaceBattery(RULhat,t))
}
for (t in time) { # Calculate cost of each method at each inspection time
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(replaceBattery(RULhat,t,tau))
}
View(RULhatdata)
View(RULhatdata)
RULhatdata$lm1[1600]
RULhatdata$lm1[1800]
!replaceBattery(RULhat,t,tau)
!replaceBattery(RULhat,t,tau)[2]
replaceBattery(RULhat,t,tau)[2]
for (t in time) { # Calculate cost of each method at each inspection time
while (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
remove(cost)
cost = c()
for (t in time) { # Calculate cost of each method at each inspection time
while (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
remove(cost)
cost = c()
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(!replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
for (t in time) { # Calculate cost of each method at each inspection time
#if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
replaceBattery(RULhat,400,tau))
replaceBattery(RULhat,400,tau)
RULhat[400]
# Function that determines if a battery should be replaced
replaceBattery <- function(RULhat,t,tau){
# INPUT
#   RULhat:   vector containing predicted RUL, based on linear model
#   t:        time of inspection, INT
#   tau:      inspection period
# OUTPUT
#   replace:  BOOLEAN, TRUE means replace battery, FALSE means keep battery
replace =  case_when( # replace battery?
RULhat[t] < tau ~ TRUE,
RULhat[t] >= tau ~ FALSE,
TRUE ~ FALSE)
return(replace)
}
for (t in time) { # Calculate cost of each method at each inspection time
#if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(!replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
remove(cost)
cost = c()
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(!replaceBattery(RULhat,t,tau))
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
RULhat[1600]
tail(time, n=1)
tail(time, n=2)
tail(time,2)
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
}
t
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
print(t)
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}else{
print(t)}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
print(t)
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}else{print("test")
print(t)}
}
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
}
else{ # replace battery
# add replacement battery
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print("break")
break
}
}
remove(cost)
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(t)
}
else{ # replace battery
# add replacement battery
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print("break")
break
}
}
cost = c()
for (t in time) { # Calculate cost of each method at each inspection time
if (!replaceBattery(RULhat,t,tau)){ # check if replaceBattery is TRUE
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print(t)
}
else{ # replace battery
# add replacement battery
cost = append(cost, calculateCost(Cr,Cm,Cp,t, tau, RULhat, RULtrue))
print("break")
break
}
}
RULtrue[1600]
costdata <- data.frame(time = time, cost = cost)
X <- vector(mode="integer", length=10)
X <- vector(mode="numeric", length=10)
size(time)
length(time)
cost <- vector(mode="numeric", length(time))
